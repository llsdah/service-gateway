
syntax = "proto3";

package gateway;

// 옵션추가 
option go_package = "./;proto";
option java_package = "com.servicegateway.grpc";
option java_outer_classname = "GatewayProto";
option java_multiple_files = true;


// rpc 로 gRPC 함수 인터페이스 정의 
service GatewayService {
    // 통신확인
    rpc SayHello(HelloRequest) returns (HelloResponse);
    
    // Redis 
    rpc Save(SaveSessionRequest) returns (GenericResponse);
    rpc Session(GetSessionRequest) returns (GenericResponse);
    rpc SaveWithTarget (SaveSessionWithTargetRequest) returns (GenericResponse);
    rpc SessionWithTarget (GetSessionWithTargetRequest) returns (GenericResponse);

    // kafka
    rpc SendKafkaMessage(SendKafkaMessageRequest) returns (GenericResponse);
    rpc SendFileToKafka (SendFileRequest) returns (SendFileResponse);
}

// 구조체 역할
message HelloRequest {
    string name = 1;
}

message HelloResponse {
    string message = 1;
}


// REDIS
// 1,2 = 필드 순서 및 식별자 유니크
message SaveSessionRequest {
    string key = 1;
    string value = 2;
    int64 ttl = 3;
}

message GetSessionRequest {
    string key = 3;
}

message SaveSessionWithTargetRequest {
    string ip = 1;
    string port = 2;
    string key = 3;
    string value = 4;
    int64 ttl = 5; // seconds 
}

message GetSessionWithTargetRequest {
    string ip = 1;
    string port = 2;
    string key = 3;
}

message GenericResponse {
    bool success = 1;
    string message = 2;
}


message SendKafkaMessageRequest {
    repeated string brokers = 1; 
    string topic = 2;
    string key = 3; 
    string value = 4;
}

message SendFileRequest {
    repeated string brokers = 1; // ["localhost:9092","kafka1:9093"]
    string topic = 2;
    string input_path = 3;
    string output_path = 4;
}

message SendFileResponse {
    bool success = 1;
    string message = 2;
    int32 lines_sent = 3; // 송신된 라인 수 
}



